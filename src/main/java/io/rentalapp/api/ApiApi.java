/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.rentalapp.api;

import io.rentalapp.api.model.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-07-06T15:29:49.511604531Z[GMT]")
@Validated
public interface ApiApi {

    @Operation(summary = "Get tools available for rent", description = "", tags={ "Tool" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Tool.class)))) })
    @RequestMapping(value = "/api/v1/tool",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Tool>> getApiV1Tool();


    @Operation(summary = "Get pricing details", description = "", tags={ "Tool" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ToolPricingDetails.class))) })
    @RequestMapping(value = "/api/v1/tool/{code}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ToolPricingDetails> getApiV1ToolCode(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("code") String code
);


    @Operation(summary = "Get Inventory details", description = "", tags={ "Tool" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Inventory.class))) })
    @RequestMapping(value = "/api/v1/tool/{code}/inventory",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Inventory> getApiV1ToolInventory(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("code") String code
);


    @Operation(summary = "Create a rental agreement", description = "", tags={ "Tool" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RentalAgreement.class))) })
    @RequestMapping(value = "/api/v1/tool/{code}/checkout",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<RentalAgreement> postApiV1ToolCodeCheckout(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("code") String code
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody RentalRequest body
);

    @Operation(summary = "Get all rental agreements", description = "", tags={ "RentalAgreement" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RentalAgreement.class)))) })
    @RequestMapping(value = "/api/v1/tool/rentalAgreement",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<RentalAgreement>> getAllRentalAgreements();

}

